---
# tasks file for roles/install_kibana

- name: "Import kibana rpm key"
  ansible.builtin.rpm_key:
    state: "present"
    key: "https://artifacts.elastic.co/GPG-KEY-elasticsearch"
  tags:
    - create
    - install_kib
    - debug

- name: "Print installer download locations"
  ansible.builtin.debug:
    msg: "Downloading from: >{{ kib_installer_url }}< To: >{{ tmp_dir }}/kibana.rpm<"
  tags:
    - create
    - debug

- name: "Check if file has already been downloaded"
  ansible.builtin.stat:
    path: "{{ tmp_dir }}/kibana.rpm"
  register: kib_file_exist
  tags:
    - create
    - install_kib
    - debug

- name: "Print file exists"
  ansible.builtin.debug:
    msg: "File exists: >{{ kib_file_exist.stat.exists }}<"
  tags:
    - create
    - install_kib
    - debug

- name: "Download installer"
  ansible.builtin.get_url:
    url: "{{ kib_installer_url }}"
    dest: "{{ tmp_dir }}/kibana.rpm"
    mode: "0440"
    validate_certs: false
  when: kib_file_exist.stat.exists == False
  tags:
    - create
    - install_kib
    - debug

- name: "Download sha512"
  ansible.builtin.get_url:
    url: "{{ kib_installer_sha_url }}"
    dest: "{{ tmp_dir }}/kibana.sha512"
    mode: "0440"
  tags:
    - create
    - install_kib
    - debug

- name: "Get sha256 sum of downloaded installer"
  ansible.builtin.stat:
    path: "{{ tmp_dir }}/kibana.rpm"
    checksum_algorithm: "sha512"
    get_checksum: true
  register: file_stat
  tags:
    - create
    - install_kib
    - debug

- name: "Register file hash"
  ansible.builtin.shell:
    cmd: "cat {{ tmp_dir }}/kibana.sha512 | awk '{print $1}'"
  register: file_hash
  tags:
    - create
    - install_kib
    - debug

- name: "Print hashes"
  ansible.builtin.debug:
    msg: "File Contents: >{{file_hash.stdout}}< File Hash >{{file_stat.stat.checksum}}<"
  tags:
    - create
    - install_kib
    - debug

- name: "Verify sha256sum of download before execution"
  ansible.builtin.fail:
    msg: "Failure, file is not correct."
  when: file_stat.stat.checksum != file_hash.stdout
  tags:
    - create
    - install_kib

- name: Disable IPV6
  ansible.posix.sysctl:
    name: '{{ item.setting }}'
    value: '{{ item.value }}'
    sysctl_set: true
  loop:
    - { setting: 'net.ipv6.conf.all.disable_ipv6', value: '1' }
    - { setting: 'net.ipv6.conf.default.disable_ipv6', value: '1' }
    - { setting: 'net.ipv6.conf.lo.disable_ipv6', value: '1' }
    - { setting: 'net.ipv6.conf.eth0.disable_ipv6', value: '1'}
  tags:
    - create
    - install_kib

- name: "Stop and disable firewalld"
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false
  tags:
    - create
    - install_kib

- name: "Install kibana package"
  ansible.builtin.yum:
    name: '{{ tmp_dir }}/kibana.rpm'
    state: present
  register: install_out
  tags:
    - create
    - install_kib

- name: "Print installer output"
  ansible.builtin.debug:
    msg: "{{ install_out }}.split('\n') }}"
  tags:
    - create
    - install_kib
    - remove_kib

- name: "Deploy Kibana Configuration File"
  ansible.builtin.template:
    backup: true
    src: "kibana.yml.j2"
    dest: "/etc/kibana/kibana.yml"
    owner: "root"
    group: "kibana"
    mode: "0660"
  tags:
    - create
    - install_kib
    - deploy_template
    - debug

- name: "Create certs directory"
  ansible.builtin.file:
    path: "/etc/kibana/certs"
    state: directory
    owner: "root"
    group: "kibana"
    mode: "0770"
  tags:
    - create
    - install_kib
    - debug

- name: "Push new ES certs to nodes"
  ansible.builtin.copy:
    src: "{{ tmp_dir }}/{{ cluster_name }}{{ item }}"
    dest: "/etc/kibana/certs/"
    owner: "root"
    group: "kibana"
    mode: "0660"
  with_items:
    - "{{ '_certs_pkcs12.zip' }}"
    - "{{ '_http_certificates.zip' }}"
    - "{{ '_fleet.zip' }}"
    - "{{ '_ca.pem' }}"
    - "{{ '_ca.p12' }}"
  # when: inventory_hostname in groups['elastic_nodes']
  tags:
    - create
    - certs

#- name: "Push new ES certs to nodes"
#  ansible.builtin.copy:
#    src: "{{ tmp_dir }}/{{ cluster_name }}_certs_pcks12.zip"
#    dest: "/etc/kibana/certs/{{ cluster_name }}_certs_pkcs12.zip"
#    owner: "root"
#    group: "kibana"
#    mode: "0660"
#  # when: inventory_hostname in groups['elastic_nodes']
#  tags:
#    - create
#    - certs
#
#- name: "Push Fleet certificates to nodes"
#  ansible.builtin.copy:
#    src: "{{ tmp_dir }}/{{ cluster_name }}_fleet.zip"
#    dest: "/etc/kibana/certs/{{ cluster_name }}_fleet.zip"
#    owner: "root"
#    group: "kibana"
#    mode: "0660"
#  # when: inventory_hostname in groups['kibana_nodes']
#  tags:
#    - create
#    - certs
#
## Push new ca pem file to nodes
#- name: "Push new ca pem file to nodes"
#  ansible.builtin.copy:
#    src: "{{ tmp_dir }}/{{ cluster_name }}_ca.pem"
#    dest: "/etc/kibana/certs/{{ cluster_name }}_ca.pem"
#    owner: "root"
#    group: "kibana"
#    mode: "0660"
#  # when: inventory_hostname in groups['elastic_nodes']
#  tags:
#    - create
#    - certs
#
## Push new ca certificates p12 file to nodes
#- name: "Push new ca certificates p12 file to nodes"
#  ansible.builtin.copy:
#    src: "{{ tmp_dir }}/{{ cluster_name }}_ca.p12"
#    dest: "/etc/kibana/certs/{{ cluster_name }}_ca.p12"
#    owner: "root"
#    group: "kibana"
#    mode: "0660"
#  # when: inventory_hostname in groups['elastic_nodes']
#  tags:
#    - create
#    - certs

#- name: "Push certs to nodes"
#  ansible.builtin.copy:
#    src: "{{ tmp_dir }}/{{ cluster_name }}_certs_pcks12.zip"
#    dest: "/etc/kibana/certs/{{ cluster_name }}_certs_pkcs12.zip"
#    owner: "root"
#    group: "kibana"
#    mode: "0660"
#  tags:
#    - create
#    - install_es
#    - debug
#
#- name: "Push fleet certs to nodes"
#  ansible.builtin.copy:
#    src: "{{ tmp_dir }}/{{ cluster_name }}_fleet.zip"
#    dest: "/etc/kibana/certs/{{ cluster_name }}_fleet.zip"
#    owner: "root"
#    group: "kibana"
#    mode: "0660"
#  when: inventory_hostname in groups['kibana_nodes']
#  tags:
#    - create
#    - certs
#
#- name: "Push ca pem to nodes"
#  ansible.builtin.copy:
#    src: "{{ tmp_dir }}/{{ cluster_name }}_certs_pcks12.zip"
#    dest: "/etc/kibana/certs/{{ cluster_name }}_certs_pkcs12.zip"
#    owner: "root"
#    group: "kibana"
#    mode: "0660"
#  tags:
#    - create
#    - install_es
#    - debug

- name: "Ensure certificate directories"
  ansible.builtin.file:
    path: "/etc/kibana/certs/{{ item }}"
    state: "directory"
    owner: "root"
    group: "kibana"
    mode: "0770"
  with_items:
    - "{{ 'transport' }}"
    - "{{ 'http' }}"
  tags:
    - create
    - certs

- name: "Unzip transport certificates file on ES nodes"
  ansible.builtin.unarchive:
    src: "/etc/kibana/certs/{{ cluster_name }}{{ item }}"
    dest: "/etc/kibana/certs/transport/"
    remote_src: true
  with_items:
    - "{{ '_certs_pkcs12.zip' }}"
    # - "{{ '_http_certificates.zip' }}"
    # - "{{ '_fleet.zip' }}"
    # - "{{ /etc/kibana/certs/{{ cluster_name }}_ca.pem }}"
    # - "{{ /etc/kibana/certs/{{ cluster_name }}_ca.p12 }} }}"
  tags:
    - create
    - certs

- name: "Unzip http certificates file on ES nodes"
  ansible.builtin.unarchive:
    src: "/etc/kibana/certs/{{ cluster_name }}{{ item }}"
    dest: "/etc/kibana/certs/http/"
    remote_src: true
  with_items:
    # - "{{ '_certs_pkcs12.zip' }}"
    - "{{ '_http_certificates.zip' }}"
  tags:
    - create
    - certs

#- name: "Unzip cluster certificates file"
#  ansible.builtin.unarchive:
#    src: "/etc/kibana/certs/{{ cluster_name }}_certs_pkcs12.zip"
#    dest: "/etc/kibana/certs/"
#    remote_src: true
#  tags:
#    - create
#    - install_es
#    - debug
#
#- name: "Unzip fleet certificates file on ES nodes"
#  ansible.builtin.unarchive:
#    src: "/etc/kibana/certs/{{ cluster_name }}_fleet.zip"
#    dest: "/etc/kibana/certs/"
#    remote_src: true
#  # when: inventory_hostname in groups['kibana_nodes']
#  tags:
#    - create
#    - certs

- name: "Generate key file"
  ansible.builtin.shell:
    cmd: "openssl pkcs12 -info -in /etc/kibana/certs/http/{{ ansible_nodename }}/{{ ansible_nodename }}.p12 -passin pass:{{ TLS_Pass }} -nodes -nocerts -out /etc/kibana/certs/http/{{ ansible_nodename }}/{{ ansible_nodename }}.key"
    creates: "/etc/kibana/certs/http/{{ ansible_nodename }}/{{ ansible_nodename }}.key"
  tags:
    - create
    - install_kib
    - debug

- name: "Set permissions on key file"
  ansible.builtin.file:
    path: "/etc/kibana/certs/http/{{ ansible_nodename }}/{{ ansible_nodename }}.key"
    owner: "root"
    group: "kibana"
    mode: "0660"
  tags:
    - create
    - install_kib
    - debug

- name: "Generate .pem file"
  ansible.builtin.shell:
    cmd: "openssl pkcs12 -in /etc/kibana/certs/http/{{ ansible_nodename }}/{{ ansible_nodename }}.p12 -passin pass:{{ TLS_Pass }} -out /etc/kibana/certs/http/{{ ansible_nodename }}/{{ ansible_nodename }}.pem -nodes -clcerts"
    creates: "/etc/kibana/certs/http/{{ ansible_nodename }}/{{ ansible_nodename }}.pem"
  tags:
    - create
    - install_kib
    - debug

- name: "Set permissions on .pem file"
  ansible.builtin.file:
    path: "/etc/kibana/certs/http/{{ ansible_nodename }}/{{ ansible_nodename }}.pem"
    owner: "root"
    group: "kibana"
    mode: "0660"
  tags:
    - create
    - install_kib
    - debug

- name: "Store the password in the Elasticsearch transport keystore"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/kibana/bin/kibana-keystore add xpack.security.transport.ssl.keystore.secure_password -fx"
  tags:
    - create
    - certs
    - keystore

- name: "Store certificate password in xpack stores"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/kibana/bin/kibana-keystore add {{ item }} -fx"
  with_items:
    - "{{ 'xpack.security.transport.ssl.keystore.secure_password' }}"
    - "{{ 'xpack.security.transport.ssl.truststore.secure_password' }}"
    - "{{ 'xpack.security.http.ssl.keystore.secure_password' }}"
  tags:
    - create
    - certs

#- name: "Store the password in the Elasticsearch transport truststore"
#  ansible.builtin.shell:
#    cmd: "echo {{ TLS_Pass }} | /usr/share/kibana/bin/kibana-keystore add xpack.security.transport.ssl.truststore.secure_password -fx"
#  tags:
#    - create
#    - certs
#    - keystore

#- name: "Store the password in the Elasticsearch ssl store"
#  ansible.builtin.shell:
#    cmd: "echo {{ TLS_Pass }} | /usr/share/kibana/bin/kibana-keystore add xpack.security.http.ssl -fx"
#  tags:
#    - create
#    - certs
#    - keystore

- name: "Enable kibana"
  ansible.builtin.systemd:
    enabled: true
    name: "kibana.service"
  tags:
    - create
    - install_kib
    - debug

- name: "Start kibana"
  ansible.builtin.systemd:
    state: started
    name: "kibana.service"
  tags:
    - create
    - install_kib
    - debug
