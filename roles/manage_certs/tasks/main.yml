---

- name: "Download and install binaries on cert_node for certutil block"
  block:

    - name: "Import elastic rpm key"
      ansible.builtin.rpm_key:
        state: 'present'
        key: 'https://artifacts.elastic.co/GPG-KEY-elasticsearch'
      tags:
        - create

    - name: Print installer download locations
      ansible.builtin.debug:
        msg: "Downloading from: >{{ es_installer_url }}< To: >{{ tmp_dir }}/elasticsearch-{{ es_version }}.rpm<"
      tags:
        - create

    - name: "Check if file has already been downloaded"
      ansible.builtin.stat:
        path: "{{ tmp_dir }}/elasticsearch-{{ es_version }}.rpm"
      register: es_file_exist
      tags:
        - create

    - name: "Download installer"
      ansible.builtin.get_url:
        url: "{{ es_installer_url }}"
        dest: "{{ tmp_dir }}/elasticsearch-{{ es_version }}.rpm"
        mode: '0440'
        validate_certs: false
      tags:
        - create

    - name: "Download sha512"
      ansible.builtin.get_url:
        url: "{{ es_installer_sha_url }}"
        dest: "{{ tmp_dir }}/elasticsearch-{{ es_version }}.sha512"
        mode: '0440'
      tags:
        - create

    - name: "Get sha256 sum of downloaded installer"
      ansible.builtin.stat:
        path: "{{ tmp_dir }}/elasticsearch-{{ es_version }}.rpm"
        checksum_algorithm: sha512
        get_checksum: true
      register: file_stat
      tags:
        - create

    - name: "Register file hash"
      ansible.builtin.shell:
        cmd: "cat {{ tmp_dir }}/elasticsearch-{{ es_version }}.sha512 | awk '{print $1}'"
      register: file_hash
      tags:
        - create

    - name: "Print hashes"
      ansible.builtin.debug:
        msg: "File Contents: >{{ file_hash.stdout }}< File Hash >{{ file_stat.stat.checksum }}<"
      tags:
        - create

    - name: "Verify sha512sum of download before execution"
      ansible.builtin.fail:
        msg: "Failure, file is not correct."
      when: file_stat.stat.checksum != file_hash.stdout and inventory_hostname in groups['data_nodes'] + groups['master_nodes'] + groups['ml_nodes']
      tags:
        - create

    - name: "Install elastic package"
      ansible.builtin.yum:
        name: "{{ tmp_dir }}/elasticsearch-{{ es_version }}.rpm"
        state: present
      register: install_out
      tags:
        - create

    #- name: "Deploy elasticsearch.yml Jinja2 template"
    #  ansible.builtin.template:
    #    backup: true
    #    src: "elasticsearch.yml.j2"
    #    dest: "/etc/elasticsearch/elasticsearch.yml"
    #    owner: "root"
    #    group: "elasticsearch"
    #  tags:
    #    - create
    #    - debug
  when: inventory_hostname in groups['cert_node']

- name: "Ensure {{ es_cert_dir }} exists"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0770'
    owner: "root"
    # group: "{{ svc_group }}"
  when: inventory_hostname in groups['elastic_nodes']
  loop:
    - "{{ es_cert_dir }}"
    - "{{ es_cert_dir }}/transport"
    - "{{ es_cert_dir }}/http"
    - "{{ es_cert_dir }}/fleet"
  tags:
    - create
    - certs

- name: "Deploy _instances.yml templates"
  ansible.builtin.template:
    src: "transport_instances.yml.j2"
    dest: "{{ es_cert_dir }}/transport_instances.yml"
    owner: "root"
    # group: "elasticsearch"
    mode: "0644"
  when: inventory_hostname in groups['cert_node']
  tags:
    - create
    - deploy_instances
    - certs

- name: "Deploy _instances.yml templates"
  ansible.builtin.template:
    src: "http_instances.yml.j2"
    dest: "{{ es_cert_dir }}/http_instances.yml"
    owner: "root"
    # group: "elasticsearch"
    mode: "0644"
  when: inventory_hostname in groups['cert_node']
  tags:
    - create
    - deploy_instances
    - certs

- name: "Create certificate authority pkcs12 on certificate node"
  ansible.builtin.shell:
    cmd: "/usr/share/elasticsearch/bin/elasticsearch-certutil ca -s --pass {{ TLS_Pass }} --out {{ es_cert_dir }}/{{ cluster_name }}_ca.p12"
    creates: "{{ es_cert_dir }}/{{ cluster_name }}_ca.p12"
  when: inventory_hostname in groups['cert_node']
  tags:
    - create
    - certs
    - create_ca

- name: "Convert certificate authority pkcs12 to pem on certificate node"
  ansible.builtin.shell:
    cmd: "openssl pkcs12 -in {{ es_cert_dir }}/{{ cluster_name }}_ca.p12 -out {{ es_cert_dir }}/{{ cluster_name }}_ca.pem -passin pass:{{ TLS_Pass }} -passout pass:{{ TLS_Pass }}"
    creates: "{{ es_cert_dir }}/{{ cluster_name }}_ca.pem"
  when: inventory_hostname in groups['cert_node']
  tags:
    - create
    - certs
    - create_ca

- name: "Create transport p12 certificates from pem ca"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-certutil cert -s --pass {{ TLS_Pass }} --ca {{ es_cert_dir }}/{{ cluster_name }}_ca.p12 --in {{ es_cert_dir }}/transport_instances.yml --out {{ es_cert_dir }}/{{ cluster_name }}_certs_pkcs12.zip"
    creates: "{{ es_cert_dir }}/{{ cluster_name }}_certs_pkcs12.zip"
  when: inventory_hostname in groups['cert_node']
  tags:
    - create
    - certs

- name: "Create http p12 certificates from pem ca"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-certutil cert -s --pass {{ TLS_Pass }} --ca {{ es_cert_dir }}/{{ cluster_name }}_ca.p12 --in {{ es_cert_dir }}/http_instances.yml --out {{ es_cert_dir }}/{{ cluster_name }}_http_certificates.zip"
    creates: "{{ es_cert_dir }}/{{ cluster_name }}_http_certificates.zip"
  when: inventory_hostname in groups['cert_node']
  tags:
    - create
    - certs

- name: "Create fleet server certificates"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-certutil cert --pem -ca {{ es_cert_dir }}/{{ cluster_name }}_ca.p12 --out {{ es_cert_dir }}/{{ cluster_name }}_fleet.zip -name fl01.powellcompanies.com"
    creates: "{{ es_cert_dir }}/{{ cluster_name }}_fleet.zip"
  when: inventory_hostname in groups['cert_node']
  tags:
    - create
    - certs

- name: "Fetch new ES cluster certificates file"
  ansible.builtin.fetch:
    src: "{{ es_cert_dir }}/{{ cluster_name }}{{ item }}"
    dest: "{{ tmp_dir }}/"
    flat: true
  when: inventory_hostname in groups['cert_node']
  with_items:
    - "{{ '_certs_pkcs12.zip' }}"
    - "{{ '_http_certificates.zip' }}"
    - "{{ '_fleet.zip' }}"
    - "{{ '_ca.pem' }}"
    - "{{ '_ca.p12' }}"
  tags:
    - create
    - certs
    - fetch

- name: "Push new ES certs to nodes"
  ansible.builtin.copy:
    src: "{{ tmp_dir }}/{{ cluster_name }}{{ item }}"
    dest: "{{ es_cert_dir }}/"
    owner: "root"
    # group: "{{ svc_group }}"
    mode: "0660"
  with_items:
    - "{{ '_certs_pkcs12.zip' }}"
    - "{{ '_http_certificates.zip' }}"
    - "{{ '_fleet.zip' }}"
    - "{{ '_ca.pem' }}"
    - "{{ '_ca.p12' }}"
  when: inventory_hostname in groups['elastic_nodes']
  tags:
    - create
    - certs

- name: "Ensure certificate directories"
  ansible.builtin.file:
    path: "{{ es_cert_dir }}/{{ item }}"
    state: "directory"
    owner: "root"
    group: "{{ svc_group }}"
    mode: "0770"
  when: inventory_hostname in groups['elastic_nodes']
  with_items:
    - "{{ 'transport' }}"
    - "{{ 'http' }}"
    - "{{ 'fleet' }}"
  tags:
    - create
    - certs

#- name: "Push CA to PKI trust"
#  ansible.builtin.copy:
#    src: "{{ tmp_dir }}/{{ cluster_name }}_ca.pem"
#    dest: "/etc/pki/ca-trust/source/anchors/"
#    owner: "root"
#    group: "root"
#    mode: "0644"
#  tags:
#    - create
#    - certs

#- name: "Update PKI trust"
#  ansible.builtin.shell:
#    cmd: "update-ca-trust"
#  tags:
#    - create
#    - certs 

- name: "Unzip transport certificates file on ES nodes"
  ansible.builtin.unarchive:
    src: "{{ es_cert_dir }}/{{ cluster_name }}{{ item }}"
    dest: "{{ es_cert_dir }}/transport/"
    remote_src: true
  when: inventory_hostname in groups['elastic_nodes']
  with_items:
    - "{{ '_certs_pkcs12.zip' }}"
  tags:
    - create
    - certs

- name: "Unzip http certificates file on ES nodes"
  ansible.builtin.unarchive:
    src: "{{ es_cert_dir }}/{{ cluster_name }}{{ item }}"
    dest: "{{ es_cert_dir }}/http/"
    remote_src: true
  when: inventory_hostname in groups['elastic_nodes']
  with_items:
    - "{{ '_http_certificates.zip' }}"
  tags:
    - create
    - certs

- name: "Unzip fleet certificates file on ES nodes"
  ansible.builtin.unarchive:
    src: "{{ es_cert_dir }}/{{ cluster_name }}{{ item }}"
    dest: "{{ es_cert_dir }}/fleet/"
    remote_src: true
  when: inventory_hostname in groups['elastic_nodes']
  with_items:
    - "{{ '_fleet.zip' }}"
  tags:
    - create
    - certs

- name: "Set permissions on {{ es_cert_dir }}/ directory recursively"
  ansible.builtin.file:
    path: "{{ es_cert_dir }}"
    state: directory
    mode: '0770'
    owner: "root"
    # group: "{{ svc_group }}"
  when: inventory_hostname in groups['elastic_nodes']