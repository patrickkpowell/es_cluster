---
# tasks file for elasticsearch

- name: "Wait for SSH"
  ansible.builtin.wait_for_connection:

- name: "Import elastic rpm key"
  ansible.builtin.rpm_key:
    state: 'present'
    key: 'https://artifacts.elastic.co/GPG-KEY-elasticsearch'
  tags:
    - create
    - install_es

- name: Print installer download locations
  ansible.builtin.debug:
    msg: "Downloading from: >{{es_installer_url}}< To: >{{tmp_dir}}/elasticsearch.rpm<"
  tags:
    - create
    - install_es

- name: "Check if file has already been downloaded"
  ansible.builtin.stat:
    path: "{{tmp_dir}}/elasticsearch.rpm"
  register: es_file_exist
  tags:
    - create
    - install_es

- name: "Download installer"
  ansible.builtin.get_url:
    url: "{{es_installer_url}}"
    dest: "{{tmp_dir}}/elasticsearch.rpm"
    mode: '0440'
    # creates: '{{tmp_dir}}/elasticsearch.rpm'
    validate_certs: false
  # when: "{{tmp_dir}}/elasticsearch.rpm.stat.exists" == False
  when: es_file_exist.stat.exists == False
  tags:
    - create
    - install_es

- name: "Download sha512"
  ansible.builtin.get_url:
    url: "{{es_installer_sha_url}}"
    dest: "{{tmp_dir}}/elasticsearch.sha512"
    mode: '0440'
  tags:
    - create
    - install_es

- name: "Get sha256 sum of downloaded installer"
  ansible.builtin.stat:
    path: "{{tmp_dir}}/elasticsearch.rpm"
    checksum_algorithm: sha512
    get_checksum: true
  register: file_stat
  tags:
    - create
    - install_es

- name: "Register file hash"
  ansible.builtin.shell:
    cmd: "cat {{tmp_dir}}/elasticsearch.sha512 | awk '{print $1}'"
  register: file_hash
  tags:
    - create
    - install_es

- name: "Print hashes"
  ansible.builtin.debug:
    msg: "File Contents: >{{file_hash.stdout}}< File Hash >{{file_stat.stat.checksum}}<"
  tags:
    - create
    - install_es

- name: "Verify sha256sum of download before execution"
  ansible.builtin.fail:
    msg: "Failure, file is not correct."
  when: file_stat.stat.checksum != file_hash.stdout
  tags:
    - create
    - install_es

- name: "Disable IPV6"
  ansible.posix.sysctl:
    name: "{{ item.setting }}"
    value: "{{ item.value }}"
    sysctl_set: true
  loop:
    - { setting: 'net.ipv6.conf.all.disable_ipv6', value: '1' }
    - { setting: 'net.ipv6.conf.default.disable_ipv6', value: '1' }
    - { setting: 'net.ipv6.conf.lo.disable_ipv6', value: '1' }
    - { setting: 'net.ipv6.conf.eth0.disable_ipv6', value: '1'}
  tags:
    - create
    - install_es

- name: "Stop and disable firewalld"
  ansible.builtin.service:
    name: "firewalld"
    state: "stopped"
    enabled: false
  tags:
    - create
    - install_es

- name: "Install elastic package"
  ansible.builtin.yum:
    name: "{{tmp_dir}}/elasticsearch.rpm"
    state: present
  register: install_out
  tags:
    - create
    - install_es

- name: "Print installer output"
  ansible.builtin.debug:
    msg: "{{ install_out }}.split('\n') }}"
  tags:
    - create
    - install_es

- name: "Deploy elasticsearch.yml Jinja2 template"
  ansible.builtin.template:
    backup: true
    src: "elasticsearch.yml.j2"
    dest: "/etc/elasticsearch/elasticsearch.yml"
    owner: "root"
    group: "elasticsearch"
  tags:
    - create
    - install_es
    - debug

#- name: "Create certificate authority on the master node"
#  ansible.builtin.shell:
#    cmd: "/usr/share/elasticsearch/bin/elasticsearch-certutil ca -s --out /etc/elasticsearch/certs/{{cluster_name}}_ca.p12 --pass {{TLS_Pass}}"
#    creates: "/etc/elasticsearch/certs/{{cluster_name}}_ca.p12"
#  when: inventory_hostname in groups['esmaster']
#  tags:
#    - create
#    - install_es
#    - debug
#    - create_ca

- name: "Create certificate authority pem on master node"
  ansible.builtin.shell:
    cmd: "/usr/share/elasticsearch/bin/elasticsearch-certutil ca -s --pem --out /etc/elasticsearch/certs/{{cluster_name}}_ca.zip --pass {{TLS_Pass}}"
    creates: "/etc/elasticsearch/certs/{{cluster_name}}_ca.zip"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - install_es
    - debug
    - create_ca

- name: "Unzip CA files"
  ansible.builtin.unarchive:
    src: "/etc/elasticsearch/certs/{{cluster_name}}_ca.zip"
    dest: "/etc/elasticsearch/certs/"
    remote_src: true
  tags:
    - create
    - install_es
    - debug
  when: inventory_hostname in groups['certnode']

    
- name: "Deploy es_instances.yml template"
  ansible.builtin.template:
    src: "es_instances.yml.j2"
    dest: "/etc/elasticsearch/certs/es_instances.yml"
    owner: "root"
    group: "elasticsearch"
    mode: "0644"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - install_es
    - deploy_instances
    - debug

- name: "Deploy kib_instances.yml template"
  ansible.builtin.template:
    src: "kib_instances.yml.j2"
    dest: "/etc/elasticsearch/certs/kib_instances.yml"
    owner: "root"
    group: "elasticsearch"
    mode: "0644"
  when: inventory_hostname in groups['certnode']
  tags: 
    - create
    - install_es
    - deploy_instances
    - debug

- name: "Create p12 certificates from pem ca"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-certutil cert -s --pass {{ TLS_Pass }} --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --in /etc/elasticsearch/certs/es_instances.yml -out /etc/elasticsearch/certs/{{ cluster_name }}_pkcs_12.zip"
    creates: "/etc/elasticsearch/certs/{{ cluster_name }}_pkcs_12.zip"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - install_es
    - debug

- name: "Create pem certificates from pem ca"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-certutil cert --silent --pem  --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --in /etc/elasticsearch/certs/es_instances.yml --out /etc/elasticsearch/certs/{{ cluster_name }}_pem.zip"
    creates: "/etc/elasticsearch/certs/{{ cluster_name }}_pem.zip"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - install_es
    - debug

- name: "Create certificates for the cluster"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-certutil cert --silent --in /etc/elasticsearch/certs/es_instances.yml --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --out /etc/elasticsearch/certs/{{ cluster_name }}_certs.zip --pass {{ TLS_Pass }}"
    creates: "/etc/elasticsearch/certs/{{ cluster_name }}_certs.zip"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - install_es
    - debug

- name: "Fetch cluster certificates file"
  ansible.builtin.fetch:
    src: "/etc/elasticsearch/certs/{{ cluster_name }}_certs.zip"
    dest: "{{ tmp_dir }}/{{ cluster_name }}_certs.zip"
    flat: true
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - install_es
    - debug

- name: "Push certs to nodes"
  ansible.builtin.copy:
    src: "{{ tmp_dir }}{{ cluster_name }}_certs.zip"
    dest: "/etc/elasticsearch/certs/{{ cluster_name }}_certs.zip"
    owner: "root"
    group: "elasticsearch"
    mode: "0660"
  tags:
    - create
    - install_es
    - debug

- name: "Unzip cluster certificates file"
  ansible.builtin.unarchive:
    src: "/etc/elasticsearch/certs/{{ cluster_name }}_certs.zip"
    dest: "/etc/elasticsearch/certs/"
    remote_src: true
  tags:
    - create
    - install_es
    - debug

- name: "Store the password in the Elasticsearch keystore"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }}  | /usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password -f"
  tags:
    - create
    - install_es
    - debug

- name: "Store the password in the Elasticsearch truststore"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }}  | /usr/share/elasticsearch/bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password -f"
  tags:
    - create
    - install_es
    - debug

- name: "Set JVM Options"
  ansible.builtin.lineinfile:
    path: /etc/elasticsearch/jvm.options
    line: '{{ item.line }}'
  loop:
    - { line: '-Djava.net.preferIPv4Stack=true' }
  tags:
    - create
    - install_es

- name: "Enable elasticsearch"
  ansible.builtin.systemd:
    enabled: true
    name: "elasticsearch.service"
  tags:
    - create
    - install_es

- name: "Start elasticsearch"
  ansible.builtin.systemd:
    state: restarted
    name: elasticsearch.service
  tags:
    - create
    - install_es

