---
# tasks file for elasticsearch

- name: "Wait for SSH"
  ansible.builtin.wait_for_connection:

- name: "Import elastic rpm key"
  ansible.builtin.rpm_key:
    state: 'present'
    key: 'https://artifacts.elastic.co/GPG-KEY-elasticsearch'
  tags:
    - create

- name: Print installer download locations
  ansible.builtin.debug:
    msg: "Downloading from: >{{ es_installer_url }}< To: >{{ tmp_dir }}/elasticsearch.rpm<"
  tags:
    - create

- name: "Check if file has already been downloaded"
  ansible.builtin.stat:
    path: "{{ tmp_dir }}/elasticsearch.rpm"
  register: es_file_exist
  tags:
    - create

- name: "Download installer"
  ansible.builtin.get_url:
    url: "{{ es_installer_url }}"
    dest: "{{ tmp_dir }}/elasticsearch.rpm"
    mode: '0440'
    # creates: '{{tmp_dir}}/elasticsearch.rpm'
    validate_certs: false
  # when: "{{tmp_dir}}/elasticsearch.rpm.stat.exists" == False
  when: es_file_exist.stat.exists == False
  tags:
    - create

- name: "Download sha512"
  ansible.builtin.get_url:
    url: "{{ es_installer_sha_url }}"
    dest: "{{ tmp_dir }}/elasticsearch.sha512"
    mode: '0440'
  tags:
    - create

- name: "Get sha256 sum of downloaded installer"
  ansible.builtin.stat:
    path: "{{ tmp_dir }}/elasticsearch.rpm"
    checksum_algorithm: sha512
    get_checksum: true
  register: file_stat
  tags:
    - create

- name: "Register file hash"
  ansible.builtin.shell:
    cmd: "cat {{ tmp_dir }}/elasticsearch.sha512 | awk '{print $1}'"
  register: file_hash
  tags:
    - create

- name: "Print hashes"
  ansible.builtin.debug:
    msg: "File Contents: >{{ file_hash.stdout }}< File Hash >{{ file_stat.stat.checksum }}<"
  tags:
    - create

- name: "Verify sha256sum of download before execution"
  ansible.builtin.fail:
    msg: "Failure, file is not correct."
  when: file_stat.stat.checksum != file_hash.stdout
  tags:
    - create

- name: "Disable IPV6"
  ansible.posix.sysctl:
    name: "{{ item.setting }}"
    value: "{{ item.value }}"
    sysctl_set: true
  loop:
    - { setting: 'net.ipv6.conf.all.disable_ipv6', value: '1' }
    - { setting: 'net.ipv6.conf.default.disable_ipv6', value: '1' }
    - { setting: 'net.ipv6.conf.lo.disable_ipv6', value: '1' }
    - { setting: 'net.ipv6.conf.eth0.disable_ipv6', value: '1'}
  tags:
    - create

- name: "Stop and disable firewalld"
  ansible.builtin.service:
    name: "firewalld"
    state: "stopped"
    enabled: false
  tags:
    - create

- name: "Install elastic package"
  ansible.builtin.yum:
    name: "{{ tmp_dir }}/elasticsearch.rpm"
    state: present
  register: install_out
  tags:
    - create

- name: "Print installer output"
  ansible.builtin.debug:
    msg: "{{ install_out }}.split('\n') }}"
  tags:
    - create

- name: "Deploy elasticsearch.yml Jinja2 template"
  ansible.builtin.template:
    backup: true
    src: "elasticsearch.yml.j2"
    dest: "/etc/elasticsearch/elasticsearch.yml"
    owner: "root"
    group: "elasticsearch"
  tags:
    - create
    - debug

- name: "Ensure certs directory exists on ES servers"
  ansible.builtin.file:
    path: "/etc/elasticsearch/certs"
    state: "directory"
    owner: "root"
    group: "elasticsearch"
    mode: "0770"
  tags:
    - create
    - certs
  when: inventory_hostname in groups['elastic_nodes']

#- name: "Ensure certs directory exists on Kibana servers"
#  ansible.builtin.file:
#    path: "/etc/kibana/certs"
#    state: "directory"
#    owner: "root"
#    group: "kibana"
#    mode: "0770"
#  tags:
#    - create
#    - certs
#  when: inventory_hostname in groups['kibana_nodes']


#####################################################################################################
# Create new certificate authority pcks12 and pem files
#####################################################################################################
- name: "Create certificate authority pkcs12 on certificate node"
  ansible.builtin.shell:
    cmd: "/usr/share/elasticsearch/bin/elasticsearch-certutil ca -s --pass {{ TLS_Pass }} --out /etc/elasticsearch/certs/{{ cluster_name }}_ca.p12"
    creates: "/etc/elasticsearch/certs/{{ cluster_name }}_ca.p12"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - certs
    - create_ca

- name: "Convert certificate authority pkcs12 to pem on certificate node"
  ansible.builtin.shell:
    cmd: "openssl pkcs12 -in /etc/elasticsearch/certs/{{ cluster_name }}_ca.p12 -out /etc/elasticsearch/certs/{{ cluster_name }}_ca.pem -passin pass:{{ TLS_Pass }} -passout pass:{{ TLS_Pass }}"
    creates: "/etc/elasticsearch/certs/{{ cluster_name }}_ca.pem"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - certs
    - create_ca

#####################################################################################################
# Deploy instances files to certificate node
# transport_instances.yml.j2 to generate transport_instances.yml and certs
# http_instances.yml.j2 to generate http_instances.yml and certs
#####################################################################################################
- name: "Deploy _instances.yml templates"
  ansible.builtin.template:
    src: "transport_instances.yml.j2"
    dest: "/etc/elasticsearch/certs/transport_instances.yml"
    owner: "root"
    group: "elasticsearch"
    mode: "0644"
  # with_items:
  #   - "{{ 'transport_instances.yml.j2' }}"
  #   - "{{ 'http_instances.yml.j2' }}"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - deploy_instances
    - certs

- name: "Deploy _instances.yml templates"
  ansible.builtin.template:
    src: "http_instances.yml.j2"
    dest: "/etc/elasticsearch/certs/http_instances.yml"
    owner: "root"
    group: "elasticsearch"
    mode: "0644"
  # with_items:
  #   - "{{ 'transport_instances.yml.j2' }}"
  #   - "{{ 'http_instances.yml.j2' }}"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - deploy_instances
    - certs

#- name: "Deploy http_instances.yml template"
#  ansible.builtin.template:
#    src: http_instances.yml.j2
#    dest: /etc/elasticsearch/certs/http_instances.yml
#    owner: root
#    group: elasticsearch
#    mode: '0644'
#  when: inventory_hostname in groups['cert_nodes']

- name: "Create transport p12 certificates from pem ca"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-certutil cert -s --pass {{ TLS_Pass }} --ca /etc/elasticsearch/certs/{{ cluster_name }}_ca.p12 --in /etc/elasticsearch/certs/transport_instances.yml --out /etc/elasticsearch/certs/{{ cluster_name }}_certs_pkcs12.zip"
    creates: "/etc/elasticsearch/certs/{{ cluster_name }}_certs_pkcs12.zip"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - certs

- name: "Create http p12 certificates from pem ca"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-certutil cert -s --pass {{ TLS_Pass }} --ca /etc/elasticsearch/certs/{{ cluster_name }}_ca.p12 --in /etc/elasticsearch/certs/http_instances.yml --out /etc/elasticsearch/certs/{{ cluster_name }}_http_certificates.zip"
    creates: "/etc/elasticsearch/certs/{{ cluster_name }}_http_certificates.zip"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - certs

- name: "Create fleet server certificates"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-certutil cert --pem -ca /etc/elasticsearch/certs/{{ cluster_name }}_ca.p12 --out /etc/elasticsearch/certs/{{ cluster_name }}_fleet.zip -name fl01.powellcompanies.com"
    creates: "/etc/elasticsearch/certs/{{ cluster_name }}_fleet.zip"
  when: inventory_hostname in groups['certnode']
  tags:
    - create
    - certs

- name: "Fetch new ES cluster certificates file"
  ansible.builtin.fetch:
    src: "/etc/elasticsearch/certs/{{ cluster_name }}{{ item }}"
    dest: "{{ tmp_dir }}/"
    flat: true
  when: inventory_hostname in groups['certnode']
  with_items:
    - "{{ '_certs_pkcs12.zip' }}"
    - "{{ '_http_certificates.zip' }}"
    - "{{ '_fleet.zip' }}"
    - "{{ '_ca.pem' }}"
    - "{{ '_ca.p12' }}"
  tags:
    - create
    - certs
    - fetch

- name: "Push new ES certs to nodes"
  ansible.builtin.copy:
    src: "{{ tmp_dir }}/{{ cluster_name }}{{ item }}"
    dest: "/etc/elasticsearch/certs/"
    owner: "root"
    group: "elasticsearch"
    mode: "0660"
  with_items:
    - "{{ '_certs_pkcs12.zip' }}"
    - "{{ '_http_certificates.zip' }}"
    - "{{ '_fleet.zip' }}"
    - "{{ '_ca.pem' }}"
    - "{{ '_ca.p12' }}"
  # when: inventory_hostname in groups['elastic_nodes']
  tags:
    - create
    - certs

- name: "Ensure certificate directories"
  ansible.builtin.file:
    path: "/etc/elasticsearch/certs/{{ item }}"
    state: "directory"
    owner: "root"
    group: "elasticsearch"
    mode: "0770"
  with_items:
    - "{{ 'transport' }}"
    - "{{ 'http' }}"
  tags:
    - create
    - certs

- name: "Unzip transport certificates file on ES nodes"
  ansible.builtin.unarchive:
    src: "/etc/elasticsearch/certs/{{ cluster_name }}{{ item }}"
    dest: "/etc/elasticsearch/certs/transport/"
    remote_src: true
  when: inventory_hostname in groups['elastic_nodes']
  with_items:
    - "{{ '_certs_pkcs12.zip' }}"
  tags:
    - create
    - certs

- name: "Unzip http certificates file on ES nodes"
  ansible.builtin.unarchive:
    src: "/etc/elasticsearch/certs/{{ cluster_name }}{{ item }}"
    dest: "/etc/elasticsearch/certs/http/"
    remote_src: true
  when: inventory_hostname in groups['elastic_nodes']
  with_items:
    - "{{ '_http_certificates.zip' }}"
  tags:
    - create
    - certs

- name: "Set permissions on /etc/elasticsearch/certs/ directory recursively"
  ansible.builtin.file:
    path: /etc/elasticsearch/certs
    state: directory
    mode: '0770'
    owner: elasticsearch
    group: elasticsearch

- name: "Store certificate password in xpack stores"
  ansible.builtin.shell:
    cmd: "echo {{ TLS_Pass }} | /usr/share/elasticsearch/bin/elasticsearch-keystore add {{ item }} -fx"
  with_items:
    - "{{ 'xpack.security.transport.ssl.keystore.secure_password' }}"
    - "{{ 'xpack.security.transport.ssl.truststore.secure_password' }}"
    - "{{ 'xpack.security.http.ssl.keystore.secure_password' }}"
  when: inventory_hostname in groups['elastic_nodes']
  tags:
    - create
    - certs

- name: "Set JVM Options"
  ansible.builtin.lineinfile:
    path: /etc/elasticsearch/jvm.options
    line: '{{ item.line }}'
  loop:
    - { line: '-Djava.net.preferIPv4Stack=true' }
  tags:
    - create

- name: "Enable elasticsearch"
  ansible.builtin.systemd:
    enabled: true
    name: "elasticsearch.service"
  tags:
    - create

- name: "Start elasticsearch"
  ansible.builtin.systemd:
    state: restarted
    name: elasticsearch.service
  tags:
    - create
